
namespace: # defined by the deployment script
clusterName: # defined by the deployment script
awsAccount: # defined by the deployment script

appName: basic

replicaCount: 2

serviceAccount:
  name: basic-service-account

priorityClass:
  name: regular

createDeployment: true

containerPort: 8080

image:
  repository: michaelkubecourse/basic-microservice
  pullPolicy: IfNotPresent

ingress:
  enabled: true
  healthcheck:
    path: "/hello"
  host:
    paths:
      - "/hello"

containerHealthChecks:
  readinessProbe:
    failureThreshold: 2
    successThreshold: 1
    httpGet:
      path: /hello
      port: 8080
    initialDelaySeconds: 35
    periodSeconds: 10
    timeoutSeconds: 5
  livenessProbe:
    failureThreshold: 2
    successThreshold: 1
    httpGet:
      path: /hello
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5

# Note: We deliberately give here a lot of CPU resources to simulate a situation,
#       when more than one replica of the workload can NOT technically fit into one EC2 instance.
#       In other words, two replicas CANNOT coexist on one medium EC2 instance because of this high CPU requirement here.
#       The other replica must be placed onto a different EC2 instance because of its high CPU requirement.
resources:
  requests:
    memory: 384M
    cpu: 1000m
  limits:
    memory: 384M
    cpu: 1000m

horizontalPodAutoscaler:
  enabled: false

helmTest:
  enabled: true
  serviceAccountName: # defined by the deployment script
  command: "set -x; basic_hostname=$(kubectl get ingress basic -n apps -o json | jq -r '.status.loadBalancer.ingress[0].hostname') && curl -sS -X GET http://${basic_hostname}/hello?myName=MichaelK"
  expectedCommandResult: "Hello MichaelK!"
